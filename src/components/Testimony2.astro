---
import { Image } from "astro:assets";
import testimony from "../assets/testimony.png";
const testimonios = [
  {
    nombre: "Luis Vasquez",
    cargo: "CEO",
    texto:
      "Monitoreo satelital en tiempo real (homologado por CESVI) para que sigas cada paso de tu carga.",
    imagen: testimony,
  },
  {
    nombre: "Ana Gómez",
    cargo: "Directora de Logística",
    texto:
      "Gracias a su sistema, optimizamos nuestras rutas y reducimos los tiempos de entrega.",
    imagen: testimony,
  },
  {
    nombre: "Juan mata",
    cargo: "Directora de Logística",
    texto:
      "Gracias a su sistema, optimizamos nuestras rutas y reducimos los tiempos de entrega.",
    imagen: testimony,
  },
];
---

<section class="testimonios">
  <div class="container__global">
    <div class="testimonios__contenedor" id="slider">
      {
        testimonios.map((t, i) => (
          <figure class="testimonios__item" data-index={i}>
            <div class="testimonios__descripcion">
              <div class="testimonios__imagen">
                <svg
                  width="229"
                  height="229"
                  viewBox="0 0 229 229"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                  class="testimonios__icon"
                >
                  <path
                    d="M85.8359 47.6836C90.8751 47.6836 95.7078 49.6854 99.271 53.2486C102.834 56.8118 104.836 61.6445 104.836 66.6836V123.684C104.836 153.419 89.1609 173.017 59.6444 180.399C58.4309 180.712 57.1675 180.782 55.9268 180.605C54.6861 180.427 53.4928 180.006 52.4155 179.366C51.3382 178.726 50.3983 177.878 49.6499 176.873C48.9015 175.868 48.3594 174.724 48.0549 173.509C47.7503 172.293 47.6893 171.029 47.8754 169.79C48.0615 168.55 48.491 167.36 49.1391 166.287C49.7872 165.215 50.6411 164.281 51.6517 163.54C52.6623 162.798 53.8096 162.264 55.0274 161.969C76.1839 156.677 85.8359 144.612 85.8359 123.684V114.184H57.3359C52.5425 114.185 47.9256 112.375 44.4107 109.115C40.8959 105.856 38.7429 101.389 38.3834 96.6086L38.3359 95.1836V66.6836C38.3359 61.6445 40.3377 56.8118 43.9009 53.2486C47.4641 49.6854 52.2968 47.6836 57.3359 47.6836H85.8359ZM171.336 47.6836C176.375 47.6836 181.208 49.6854 184.771 53.2486C188.334 56.8118 190.336 61.6445 190.336 66.6836V123.684C190.336 153.419 174.661 173.017 145.144 180.399C143.931 180.712 142.667 180.782 141.427 180.605C140.186 180.427 138.993 180.006 137.916 179.366C136.838 178.726 135.898 177.878 135.15 176.873C134.402 175.868 133.859 174.724 133.555 173.509C133.25 172.293 133.189 171.029 133.375 169.79C133.562 168.55 133.991 167.36 134.639 166.287C135.287 165.215 136.141 164.281 137.152 163.54C138.162 162.798 139.31 162.264 140.527 161.969C161.684 156.677 171.336 144.612 171.336 123.684V114.184H142.836C138.042 114.185 133.426 112.375 129.911 109.115C126.396 105.856 124.243 101.389 123.883 96.6086L123.836 95.1836V66.6836C123.836 61.6445 125.838 56.8118 129.401 53.2486C132.964 49.6854 137.797 47.6836 142.836 47.6836H171.336Z"
                    fill="#363636"
                  />
                </svg>

                <Image src={t.imagen} alt={`Foto de ${t.nombre}`} />
              </div>
              <div class="testimonios__autor">
                <p class="testimonios__nombre">{t.nombre}</p>
                <p class="testimonios__cargo">{t.cargo}</p>
              </div>
            </div>

            <figcaption class="testimonios__contenido">
              <blockquote class="testimonios__texto">{t.texto}</blockquote>
            </figcaption>
          </figure>
        ))
      }
    </div>

    <div class="testimonios__controles">
      <button
        class="testimonios__btn"
        id="prev"
        aria-label="Testimonio anterior">←</button
      >
      <button
        class="testimonios__btn testimonios__btn--rojo"
        id="next"
        aria-label="Siguiente testimonio">→</button
      >
    </div>
  </div>
</section>

<style>
  .testimonios {
    background-color: var(--black);
    color: #f0f0f0;
    padding-block: 4rem;
    overflow: clip;
  }

  .testimonios__contenedor {
    position: relative;
  }
  .testimonios__descripcion {
    display: flex;
    justify-content: space-between;
  }
  .testimonios__item {
    box-sizing: border-box;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 3rem;
    border-bottom: 1px solid #444;
    padding-bottom: 1rem;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    opacity: 0;
  }

  .testimonios__imagen img {
    object-fit: cover;
  }

  .testimonios__imagen {
    position: relative;
    isolation: isolate;
  }

  .testimonios__icon {
    position: absolute;
    top: -4rem;
    left: 12rem;
    z-index: -1;
    height: auto;
  }
  .testimonios__contenido {
    flex: 1;
  }

  .testimonios__autor {
    text-align: right;
  }

  .testimonios__nombre {
    font-weight: bold;
    font-size: 1.2rem;
  }

  .testimonios__cargo {
    font-size: 0.8rem;
    text-transform: uppercase;
    color: #999;
  }

  .testimonios__texto {
    margin: 0;
    font-size: var(--step-2);
    color: #ccc;
    line-height: 1.5;
  }

  .testimonios__controles {
    display: flex;
    justify-content: space-between;
    margin-top: 1.5rem;
  }

  .testimonios__btn {
    border: 1px solid red;
    background: transparent;
    color: red;
    border-radius: 999px;
    padding: 0.5rem 1rem;
    cursor: pointer;
    font-size: 1.2rem;
    transition: all 0.2s ease;
  }

  .testimonios__btn:hover {
    background: rgba(255, 0, 0, 0.1);
  }

  .testimonios__btn--rojo {
    background: red;
    color: white;
  }

  @media (max-width: 550px) {
    .testimonios__descripcion {
      align-items: start;
      flex-direction: column;
    }

    .testimonios__autor {
      text-align: left;
    }
  }
</style>

<script>
  // @ts-ignore
  import { gsap } from "gsap";

  document.addEventListener("astro:page-load", () => {
    const slider = document.getElementById("slider");
    const items = slider?.querySelectorAll(".testimonios__item");
    const nextButton = document.getElementById("next");
    const prevButton = document.getElementById("prev");
    let current = 0;
    let isAnimating = false;

    if (!items || items.length === 0) {
      console.warn(
        "Slider: No se encontraron testimonios o el elemento slider no existe."
      );
      return;
    }

    // --- Función para ajustar la altura del slider y configurar slides iniciales ---
    function adjustSliderHeightAndSetup() {
      if (!slider || !items || items.length === 0) return;
      let maxHeight = 0;

      // Fase 1: Medir todos los items para encontrar la altura máxima
      items.forEach((item) => {
        const originalDisplay = item.style.display; // Guardar display original

        item.style.display = "flex"; // O el display que usas (e.g., 'block')

        maxHeight = Math.max(maxHeight, item.offsetHeight);

        item.style.display = originalDisplay;
      });

      // Aplicar la altura máxima al contenedor del slider
      if (maxHeight > 0) {
        slider.style.height = maxHeight + "px";
      }

      items.forEach((item, index) => {
        if (index !== current) {
          gsap.set(item, { opacity: 0, xPercent: 100 });
        } else {
          gsap.set(item, { opacity: 1, xPercent: 0 });
        }
      });
    }

    // Llamar a la función para ajustar altura y configurar slides al inicio
    adjustSliderHeightAndSetup();

    // --- Función para Animar los Testimonios --- (SIN CAMBIOS, igual que antes)
    function animateSlides(newIndex, direction) {
      if (isAnimating || newIndex === current) {
        return;
      }
      isAnimating = true;

      const outgoingItem = items[current];
      const incomingItem = items[newIndex];
      const duration = 0.4;
      const xDisplacement = 100;
      const ease = "power2.inOut";

      if (direction === "next") {
        gsap.set(incomingItem, { xPercent: xDisplacement });
      } else {
        gsap.set(incomingItem, { xPercent: -xDisplacement });
      }

      const tl = gsap.timeline({
        onComplete: () => {
          outgoingItem.style.opacity = 0;
          gsap.set(outgoingItem, {
            xPercent: direction === "next" ? xDisplacement : -xDisplacement,
          });
          isAnimating = false;
        },
      });

      tl.to(outgoingItem, {
        xPercent: direction === "next" ? -xDisplacement : xDisplacement,
        opacity: 0,
        duration: duration,
        ease: ease,
      });

      tl.to(
        incomingItem,
        {
          xPercent: direction === "next" ? 0 : 0,
          opacity: 1,
          duration: duration,
          ease: ease,
        },
        "-=0.5"
      );

      current = newIndex;
    }

    // --- Event Listeners para los Botones --- (SIN CAMBIOS, igual que antes)
    nextButton?.addEventListener("click", () => {
      if (items.length === 0) return;
      const newIndex = (current + 1) % items.length;
      animateSlides(newIndex, "next");
    });

    prevButton?.addEventListener("click", () => {
      if (items.length === 0) return;
      const newIndex = (current - 1 + items.length) % items.length;
      animateSlides(newIndex, "prev");
    });
  });
</script>
